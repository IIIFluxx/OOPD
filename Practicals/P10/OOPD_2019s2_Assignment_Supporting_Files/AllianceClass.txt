ABSTRACT CLASS: AllianceClass


PUBLIC CLASS CONSTANTS: MINYEARS := 1
						MAXYEARS := 10000
						
PRIVATE CLASS FIELDS:
						name(String)
						years(Integer)
						banner(BannerClass) 
	
CONSTRUCTORS:
Default:
	IMPORT: none
    EXPORT: none
    ASSERTION:
    ALGORITHM:  name := "Archer"
                years := 2
				CONSTRUCT banner USING BannerClass default // (from BannerClass)
				
Alternate:
    IMPORT: inName(String), inYears(Integer), inBanner(BannerClass)
    EXPORT: none
    ASSERTION: 
    ALGORITHM:
				setName <- inName
				setYears <- inYears
				setBanner <- inBanner

Copy:
	IMPORT: inAlliance(AllianceClass)
	EXPORT: address of new Alliance class object
	ASSERTION: Creates an object with an identical object state as the import.
	ALGORITHM:
				name := inAlliance.getName <- none
				years := inAlliance.getYears <- none
				banner = inAlliance.getBanner <- none
    
MUTATORS:
	SUBMODULE: setName
	IMPORT: inName (String)
	EXPORT: none
	ASSERTION: Sets the name to inName.
	
    IF validateName <- inName THEN
			name := inName
	ELSE
		THROW IllegalArgumentException "Invalid name - must not be null"
	ENDIF

SUBMODULE: setYears
    IMPORT: inYear (Integer)
    EXPORT: none
    ASSERTION: Sets the year if imports are valid, otherwise, fails. 
    ALGORITHM:  IF (validateYears <- inYears) THEN
					years := inYears
				ELSE
					THROW IllegalArgumentException "Invalid number of years"
				ENDIF
SUBMODULE: setBanner
    IMPORT: inBanner(BannerClass)
    EXPORT: none
    ASSERTION: sets the banner object.
    ALGORITHM: 
	
		IF inBanner IS NULL THEN
			THROW IllegalArgumentException "Invalid banner"
		ELSE 
			CONSTRUCT banner(BannerClass) USING inBanner
		ENDIF
		


    //ACCESSORS - Returns a COPY of the information
	
	SUBMODULE: getName
    IMPORT: none
    EXPORT: name(String)
	ALGORITHM: export copy of name
	
	SUBMODULE: getYears
    IMPORT: none
    EXPORT: years(Integer)
	ALGORITHM: export copy of the number of years
	
	SUBMODULE: getBanner
    IMPORT: none
    EXPORT: new Banner object 
	ALGORITHM: export a new (/copy of) banner object
	
	SUBMODULE: equals
	IMPORT: inObj (check to ensure if Alliance object)
	EXPORT: isEqual (boolean)
		isEqual := false
		IF inObj is really an Alliance THEN
			Make inObj to a Alliance named inAlliance	
			IF name same as inAlliance.getName <-- none THEN
				IF years same as inAlliance.inYears <-- none THEN
					IF banner same as inAlliance.getBanner <- none THEN
						isEqual := true
					ENDIF
				ENDIF
			ENDIF
		ENDIF

    
    // toString and toFileString override methods from House/Army classes    
    
	
	SUBMODULE toString
	IMPORT: none
	EXPORT: none
	ASSERTION:
	ALGORITHM: OUTPUT "The Alliance of " + name + "has existed for " + years + " years. " + banner.toString <- none
	
	SUBMODULE toFileString
	IMPORT: none
	EXPORT: none
	ASSERTION:
	ALGORITHM: OUTPUT name + years + "," + banner.toFileString <- none
	END SUBMODULE

    
      
    // abstract methods -- how to declare? **********************
    
    public abstract String battleStrength();

    public abstract String population();

    public abstract AllianceClass clone();
    

    // PRIVATE SUBMODULES:
	
	SUBMODULE: validateName
    IMPORT: inName(String)
    EXPORT: test (boolean)
    ASSERTION: Name must be non-empty (not null)
	ALGORITHM:
		test(boolean) := false
		IF inName is not null THEN
			test := true
		ENDIF	
	END SUBMODULE
	


SUBMODULE: validateYears
    IMPORT: inYears(Integer)
    EXPORT: valid (boolean)
    ASSERTION: Number of years must be between 1 and 10,000 (inclusive)
    ALGORITHM:  
			valid := (inYears >= MINYEARS) AND (inYears <= MAXYEARS)
		END SUBMODULE

END CLASS
		
