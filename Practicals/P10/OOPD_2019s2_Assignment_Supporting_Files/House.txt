CLASS: House extends to AllianceClass

PUBLIC CLASS CONSTANTS: 
						minbannermen := 25
						maxbannermen := 80000
						
CLASS FIELDS: 
              bannermen (Integer)
              castle (String)

			

CONSTRUCTORS:    
Default:
    IMPORT: none
    EXPORT: none
    ASSERTION:
    ALGORITHM:  super <- none
				bannermen := 2
                castle := ""
	END SUBMODULE			

Alternate:
    IMPORT: inName(String), inYears(Integer), inBanner(BannerClass), inBannermen(Integer), inCastle(String)
    EXPORT: none
    ASSERTION: 
    ALGORITHM:
				super <- inName, inYears, inBanner
				setBannermen <- inBannermen
				setCastle <- inCastle
	
			
Copy:
    IMPORT: inHouse (House)
    EXPORT: address of new House class object
    ASSERTION: Creates an object with an identical object state as the import.
    ALGORITHM:	
				super <- inHouse
				bannermen := inHouse.getBannermen <- none
				castle := inHouse.getCastle <- none
	END SUBMODULE     
                
MUTATORS:


SUBMODULE: setBannermen
    IMPORT: inBannermen (Integer)
    EXPORT: 
    ASSERTION: sets the number of bannermen if imports are valid, otherwise, fails. 
    ALGORITHM:	IF (validateBannermen <- inBannermen) THEN
					bannermen := inBannermen
				ELSE
					FAIL
				ENDIF
	END SUBMODULE
	
		
	SUBMODULE: setCastle
	IMPORT: inCastle (String)
	EXPORT: none
	ASSERTION: Sets the name to inCastle.
	
    IF validateName <- inCastle THEN
			name := inCastle
	ELSE
		THROW IllegalArgumentException "Invalid castle description - must not be null"
	ENDIF
	END SUBMODULE




SUBMODULE: clone
    IMPORT: none
    EXPORT: cloneHouse object
    ASSERTION: Makes a copy of the House object.
    ALGORITHM:  Export (CONSTRUCT new House object)
	END SUBMODULE
ACCESSORS: /* Returns a COPY of the information*/   

    
SUBMODULE: getBannermen
    IMPORT: none
    EXPORT: bannermen
	ALGORITHM: export copy of bannermen
    END SUBMODULE
	
SUBMODULE: getCastle
    IMPORT: none
    EXPORT: castle(String)
	ALGORITHM: export copy of castle
	END SUBMODULE

SUBMODULE: equals
	IMPORT: inObj (check to ensure if House object)
	EXPORT: isEqual (boolean)
		isEqual := false
		IF inObj is really a House THEN
			make inObj to a House named inHouse	

			IF superclass classfields same as inHouse THEN
				IF bannermen same as inHouse.getBannermen <-- none THEN
					IF castle same as inHouse.getCastle <-- none THEN
						isEqual := true
					ENDIF
				ENDIF
			ENDIF
		ENDIF
		END SUBMODULE

SUBMODULE toString
	IMPORT: none
	EXPORT: none
	ASSERTION:
	ALGORITHM: OUTPUT super.toString <- none + " This house has " 
				+ bannermen + " Bannerman and a castle named: "
				+ castle + ". "
				END SUBMODULE
		
SUBMODULE toFileString
	IMPORT: none
	EXPORT: none
	ASSERTION:
	ALGORITHM: OUTPUT "H," + super.toFileString <- none + "," + bannermen + "," + castle
	END SUBMODULE

SUBMODULE population
	IMPORT: none
	EXPORT: none
	ASSERTION:
	ALGORITHM: 
		population(Integer) := 0
		population := bannermen + 450
		OUTPUT "The House of " + super.getName() <- none + " has a population of " + population + "." + NEWLINE)
	END SUBMODULE

// battleStrength() automatically overridden

	SUBMODULE battleStrength
	IMPORT: none
	EXPORT: strength(Integer)
	ASSERTION:
	ALGORITHM: 
		strength(Integer) := 0
		IF castle is equal to ("") THEN
            strength := bannermen * 2
        ENDIF
		IF castle is not equal to ("")
			strength := (make into Integer)(bannermen * 2 + 2000)
		ENDIF
	END SUBMODULE
	
                
PRIVATE SUBMODULES:
SUBMODULE: validateCastle
    IMPORT: inCastle(String)
    EXPORT: test (boolean)
    ASSERTION: Castle description must be non-empty (not null)
	ALGORITHM:
		test(boolean) := false
		IF inCastle is not null THEN
			test := true
		ENDIF	
	END SUBMODULE
	
			
			
SUBMODULE: validateBannermen
    IMPORT: inBannermen(Integer)
    EXPORT: valid (boolean)
    ASSERTION: Number of bannermen must be between 25 and 80,000 (inclusive).
    ALGORITHM:  
				valid := (inBannermen >= maxbannermen) AND (inBannermen <= minbannermen)      
        
        
        
        
